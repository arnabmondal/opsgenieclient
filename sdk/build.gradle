buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'signing'

dependencies {
    compile 'org.apache.httpcomponents:httpcore:4.2.5'
    compile 'org.apache.httpcomponents:httpmime:4.2.5'
    compile 'org.apache.httpcomponents:httpclient:4.2.5'
    compile 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.3'

    testCompile project(':test')
}

tasks.check.dependsOn 'shadowJar'

shadowJar {
    relocate 'org.apache', 'com.ifountain.apache'
    relocate 'org.codehaus', 'com.ifountain.codehaus'
}

jar {
    manifest {
        attributes("Built-By": "http://www.opsgenie.com",
                "Specification-Title": "OpsGenie Java SDK",
                "Specification-Product": "opsgenie-java-sdk",
                "Specification-Version": project.version,
                "Specification-Vendor": "http://www.opsgenie.com",
                "Implementation-Title" : "OpsGenie Java SDK",
                "Implementation-Product": "opsgenie-java-sdk",
                "Implementation-Vendor":"http://www.opsgenie.com",
                "Implementation-Version":project.version,
        )
    }
}

task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    classifier 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}


uploadArchives {
    def uploadOptions = file("${rootProject.buildDir}/uploadOptions.properties")

    if(!uploadOptions.exists()) {
        if(project.hasProperty("options")) {
            uploadOptions = file(project.options)
            if(!uploadOptions.exists()) {
                println "[Uploading NEXUS] Options file does not exist. Skipping!"
                return;
            }
        } else {
            return
        }
    }

    def type = project.version.toString().contains("SNAPSHOT") ? 'snapshots' : 'releases'
    def localNexusUrl = "http://repo.opsgenie.com:9393/content/repositories/${type}"
    def props = new Properties();
    props.load(new FileInputStream(uploadOptions))
    def nexusUser = props.getProperty('nexusUser')
    def nexusPassword = props.getProperty('nexusPassword')
    repositories {

        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: localNexusUrl) {
                authentication(userName: nexusUser, password: nexusPassword)
            }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'OpsGenie Java SDK'
                packaging 'jar'
                description "OpsGenie Java SDK"

                url "https://www.opsgenie.com"

                scm {
                    connection 'scm:git:git@github.com:opsgenie/opsgenieclient.git'
                    url 'https://github.com/opsgenie/opsgenieclient'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'sezgin'
                        name 'Sezgin Kucukaraaslan'
                        email 'sezgin@opsgenie.com'
                    }

                    developer {
                        id 'eke'
                        name 'Abdurrahim Eke'
                        email 'abdurrahim@opsgenie.com'
                    }

                    developer {
                        id 'halit'
                        name 'Halit Okumus'
                        email 'halit@opsgenie.com'
                    }

                    developer {
                        id 'tuba'
                        name 'Tuba Ozturk'
                        email 'tuba@opsgenie.com'
                    }

                    developer {
                        id 'burak'
                        name 'Veli Burak Celen'
                        email 'burak@opsgenie.com'
                    }

                    developer {
                        id 'kadir'
                        name 'Kadir Turker Gulsoy'
                        email 'kadir@opsgenie.com'
                    }

                    developer {
                        id 'omer'
                        name 'Omer Ozkan'
                        email 'omer@opsgenie.com'
                    }

                    developer {
                        id 'tarik'
                        name 'M. Tarik Yurt'
                        email 'tarik@opsgenie.com'
                    }

                    developer {
                        id 'zafer'
                        name 'Zafer Genckaya'
                        email 'zafer@opsgenie.com'
                    }

                    developer {
                        id 'kaan'
                        name 'Kaan Basal'
                        email 'kaan@opsgenie.com'
                    }
                }
            }
        }
    }
}

