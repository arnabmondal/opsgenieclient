/*
 * OpsGenie REST API
 * OpsGenie API Description
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.ifountain.opsgenie.client.swagger.api;

import com.ifountain.opsgenie.client.swagger.ApiClient;
import com.ifountain.opsgenie.client.swagger.ApiException;
import com.ifountain.opsgenie.client.swagger.Configuration;
import com.ifountain.opsgenie.client.swagger.Pair;
import com.ifountain.opsgenie.client.swagger.api.model.*;
import com.sun.jersey.api.client.GenericType;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2017-03-29T15:03:15.758+03:00")
public class AlertApi {
    private ApiClient apiClient;

    public AlertApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Acknowledge Alert
     * Acknowledges alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @param body           Request payload of acknowledging alert action (optional)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse acknowledgeAlert(String identifier, String identifierType, AlertActionPayload body) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling acknowledgeAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/acknowledge".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Add Alert Details
     * Add details to the alert
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of adding alert details action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse addDetails(String identifier, CreateAlertDetailsPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling addDetails");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling addDetails");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/details".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Add Alert Note
     * Adds note to alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of adding note to alert action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse addNote(String identifier, AddAlertNotePayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling addNote");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling addNote");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/note".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Add Alert Recipient
     * Add recipient to alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of adding recipient to alert action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse addRecipient(String identifier, AddAlertRecipientPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling addRecipient");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling addRecipient");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/add-recipient".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Add Alert Tags
     * Add tags to the alert
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of creating alert tags action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse addTags(String identifier, CreateAlertTagsPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling addTags");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling addTags");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/tags".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Assign Alert
     * Assign alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of assigning alert action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse assignAlert(String identifier, AssignAlertPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling assignAlert");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling assignAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/assign".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Close Alert
     * Closes alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @param body           Request payload of closing alert action (optional)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse closeAlert(String identifier, String identifierType, AlertActionPayload body) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling closeAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/close".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Create Alert
     * Creates a new alert
     *
     * @param body Request payload of created alert (required)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse createAlert(CreateAlertPayload body) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling createAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Delete Alert
     * Deletes an alert using alert id, tiny id or alias
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @param source         Source field of the given alert (optional)
     * @param user           User field of the given alert (optional)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse deleteAlert(String identifier, String identifierType, String source, String user) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling deleteAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "source", source));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user", user));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Delete Alert Details
     * Delete the details of an alert using alert id, tiny id or alias
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param keys           Keys field of the given alert as comma seperated values (e.g. &#39;key1,key2&#39;) (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @param user           User field of the given alert (optional)
     * @param note           Note field of the given alert (optional)
     * @param source         Source field of the given alert (optional)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse deleteDetails(String identifier, List<String> keys, String identifierType, String user, String note, String source) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling deleteDetails");
        }

        // verify the required parameter 'keys' is set
        if (keys == null) {
            throw new ApiException(400, "Missing the required parameter 'keys' when calling deleteDetails");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/details".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user", user));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "note", note));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "source", source));
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "keys", keys));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Delete Alert Tags
     * Delete tags of the alert
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param tags           Tags field of the given alert as comma seperated values (e.g. &#39;tag1,tag2&#39;) (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @param user           User field of the given alert (optional)
     * @param note           Note field of the given alert (optional)
     * @param source         Source field of the given alert (optional)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse deleteTags(String identifier, List<String> tags, String identifierType, String user, String note, String source) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling deleteTags");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException(400, "Missing the required parameter 'tags' when calling deleteTags");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/tags".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user", user));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "note", note));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "source", source));
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "tags", tags));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Escalate Alert
     * Escalate alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of escalating alert action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse escalateAlert(String identifier, EscalateAlertToNextPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling escalateAlert");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling escalateAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/escalate".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Custom Alert Action
     * Custom actions for the alert
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of executing custom alert action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse executeCustomAction(String identifier, CustomActionPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling executeCustomAction");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling executeCustomAction");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/actions/custom".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Get Alert
     * Returns alert with given id, tiny id or alias
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return DetailedAlertDto
     * @throws ApiException if fails to make API call
     */
    public DetailedAlertDto getAlert(String identifier, String identifierType) throws ApiException {
        Object localVarPostBody = null;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling getAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<DetailedAlertDto> localVarReturnType = new GenericType<DetailedAlertDto>() {
        };
        return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * List alerts
     * Returns list of alerts.
     *
     * @param pageField         Determines alert field. Possible values are &#39;createdAt&#39; or &#39;updatedAt&#39; (optional, default to createdAt)
     * @param pageValue         Takes a date formatted as &#39;yyyy-MM-dd&#39;T&#39;HH:mm:ssZ&#39; (e.g. 2011-12-03T10:15:30+01:00) (optional)
     * @param pageDirection     Determines pagination direction with &#39;next&#39; and &#39;prev&#39; (optional, default to next)
     * @param limit             Pagination limit (optional)
     * @param sortField         Sorts alerts according to given field (optional, default to createdAt)
     * @param order             Sorting order (optional, default to desc)
     * @param status            Status of the alerts. Possible values are &#39;open&#39; or &#39;closed&#39; with default as ALL (optional)
     * @param acked             Acked (optional)
     * @param seen              Seen (optional)
     * @param teamIds           Team IDs as comma seperated values (e.g. &#39;team1,team2&#39;) (optional)
     * @param teamIdsRelation   Relation of team IDs. Possible values are &#39;and&#39; or &#39;or&#39; with default as &#39;and&#39; (optional, default to and)
     * @param teamNames         Team names as comma seperated values (e.g. &#39;teamName1,teamName2&#39;) (optional)
     * @param teamNamesRelation Relation of team names. Possible values are &#39;and&#39; or &#39;or&#39; with default as &#39;and&#39;. (optional, default to and)
     * @param tags              Tags (optional)
     * @param tagsRelation      Relation of tags. Possible values are &#39;and&#39; or &#39;or&#39; with default as &#39;and&#39;. (optional, default to and)
     * @return ListAlertResponse
     * @throws ApiException if fails to make API call
     */
    public ListAlertResponse listAlerts(String pageField, String pageValue, String pageDirection, Integer limit, String sortField, String order, String status, Boolean acked, Boolean seen, List<String> teamIds, String teamIdsRelation, List<String> teamNames, String teamNamesRelation, List<String> tags, String tagsRelation) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts".replaceAll("\\{format\\}", "json");

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageField", pageField));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageValue", pageValue));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pageDirection", pageDirection));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "sortField", sortField));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "order", order));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "acked", acked));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "seen", seen));
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "teamIds", teamIds));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "teamIdsRelation", teamIdsRelation));
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "teamNames", teamNames));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "teamNamesRelation", teamNamesRelation));
        localVarQueryParams.addAll(apiClient.parameterToPairs("csv", "tags", tags));
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "tagsRelation", tagsRelation));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<ListAlertResponse> localVarReturnType = new GenericType<ListAlertResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Snooze Alert
     * Snooze alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param body           Request payload of snoozing alert action (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse snoozeAlert(String identifier, SnoozeAlertPayload body, String identifierType) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling snoozeAlert");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException(400, "Missing the required parameter 'body' when calling snoozeAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/snooze".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Unacknowledge Alert
     * Unacknowledge alert with given identifier
     *
     * @param identifier     Identifier of alert which could be alert id, tiny id or alert alias (required)
     * @param identifierType Defines type of alert identifier. Possible values are \&quot;id\&quot;, \&quot;alias\&quot; or \&quot;tiny\&quot;. (optional, default to id)
     * @param body           Request payload of unacknowledging alert action (optional)
     * @return SuccessResponse
     * @throws ApiException if fails to make API call
     */
    public SuccessResponse unacknowledgeAlert(String identifier, String identifierType, AlertActionPayload body) throws ApiException {
        Object localVarPostBody = body;

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException(400, "Missing the required parameter 'identifier' when calling unacknowledgeAlert");
        }

        // create path and map variables
        String localVarPath = "/alerts/{identifier}/unacknowledge".replaceAll("\\{format\\}", "json")
                .replaceAll("\\{" + "identifier" + "\\}", apiClient.escapeString(identifier.toString()));

        // query params
        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        localVarQueryParams.addAll(apiClient.parameterToPairs("", "identifierType", identifierType));


        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[]{"GenieKey"};

        GenericType<SuccessResponse> localVarReturnType = new GenericType<SuccessResponse>() {
        };
        return apiClient.invokeAPI(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }
}
